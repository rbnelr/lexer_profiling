
{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}

{
	// /* blah
	// */

	/*
		blah // blah
		/* blah */
	*/

	//// Variable declarations
	//l = 7; // error: unknown variable.
	//l :; // can't declare var without either explicit type or inferred from assignment
	l : int;

	//l := 5; // error: variable already declared in this scope.
	l = 4;

	l = l;
	m := 7;
	l = m;

	s := "blah";
	printf("{s}\n", s);

	s = "foo";
	printf("{s}\n", s);

	//// Math
	c := -0; // 0
	c += 2;  // 2
	c *= 0 + 1; // 2

	a := +0; // 0
	a += 4 + c; // 6

	b := 0; // 0

	//a + 2 = 4; error: can only assign to variables, not arbitrary expressions.

	//b := null; // currently not a literal, since null does not exists as a type
	//b := "null";
	//b = c = a;
	//b += c += 2;

	//// Escaped strings
	printf("\\ \" ^{} {i}\n", 5);

	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);


	c = 5;

	-c; // ignored expression as statement
	b = c++; // b = 5, c = 6
	b = b++; // b++: 6  but overwritten with 5 -> b=5

	a = c; // a = 6
	a = a++ + a; // a + a+1 = 13

	c = -c;
	// a: 13  b: 5  c: -6
	printf("a: {i}  b: {i}  c: {i}\n", a, b, c);

	printf("{i}\n", 1 * a - 2);
	printf("{i}\n", 1 * 5 * 2);
	printf("{i}\n", 1 - 5 * 2);

	//// Post inc/decrement
	h := 0;
	printf("{i} {i} {i} {i} {i} {i}\n", h++, h++, h++, h--, h--, h);

	printf("---------------\n");
	k := 6;

	// error: post inc/decrement can only operate on variables.
	// (because after returned value of first increment is a rvalue)
	//printf("{}\n", - - - k ++ ++);
	printf("{i}\n", - - - k ++);
	printf("{i}\n", k);

	//// Empty statements (TODO: disallow?)
	;
	;;
	{}
	{;}

	printf("\n");

	//// Scoped variables
	printf("---------------\n");

	{
		p := -3;
		printf("inner: {i}\n", p);
	}
	//printf("outer: {}\n", p); // error: unknown variable.

	printf("---------------\n");

	p := -4;
	printf("outer: {i}\n", p);
	{
		printf("inner: {i}\n", p);
		p := -3;
		printf("inner: {i}\n", p);
	}
	printf("outer: {i}\n", p);

	printf("---------------\n");

	for i:=0; i<2; i++ {}
	//printf("access i after loop: {}\n", i); // error: unknown variable.

	//// Comparisons and booleans
	printf("---------------\n");

	//printf("{}\n", null + 1); // error: types do not match.
	//printf("{}\n", null > 1); // error: types do not match.
	//printf("{}\n", null + null); // error: can't do math with null.
	//printf("{}\n", null > null); // error: null can't be larger or smaller.

	printf("false             : {b}\n", false          );
	printf("true              : {b}\n", true           );
	printf("1 == 0            : {b}\n", 1 == 0         );
	printf("1 == 1            : {b}\n", 1 == 1         );
	//printf("'helo' == 'hello' : {b}\n", "a" == "hello" );
	//printf("'helo4' > 'helo3' : {b}\n", "helo4" > "helo3"  );
	//printf("'helo' == null    : {}\n", "a" == null    );
	printf("5 >= 5            : {b}\n", 5 >= 5         );
	printf("5 > 5             : {b}\n", 5 > 5          );
	printf("2>3 == 3>4        : {b}\n", 2>3 == 3>4     );

	printf("---------------\n");

	{ //// ifs
		a := true;
		if a {
			printf("True!\n");
		} else {
			printf("False!\n");
		}

		a = !a;
		if a {
			printf("Now it's True!\n");
		} else {
			printf("Now it's False!\n");
		}
		
		printf("\n");

		b := -2;

		if b > 0 {
			printf("b is bigger than 0!\n");
		}
		elif b == 0 {
			printf("b is equal to 0!\n");
		}
		else /* b < 0 */ {
			printf("b is smaller than 0!\n");
			if a {
				printf("Still True!\n");
			} else {
				printf("Still False!\n");
			}
		}
	}

	printf("---------------\n");


	{ //// ternary
		a := true;
		printf("a : {s}\n", a?"True!":"False...");
		
		a = !a;
		printf("a : {s}\n", a?"True!":"False...");
		
		f := false;
		t := true;
		printf("t=true f=false\n");
		printf("t? t?0:1 : t?2:3 = {i}\n", t? t?0:1 : t?2:3);
		printf("t? f?0:1 : f?2:3 = {i}\n", t? f?0:1 : t?2:3);
		printf("f? t?0:1 : t?2:3 = {i}\n", f? t?0:1 : t?2:3);
		printf("f? f?0:1 : f?2:3 = {i}\n", f? f?0:1 : f?2:3);
	}

	//// Loops
	//for 10  error: '{' expected

	//for "hello World" {}  error: ; expected

	printf("---------------\n");

	//for i:=0; i<10; break {}  // syntax error: number or variable expected.

	//for i:=0; break; i++ {} // syntax error: number or variable expected.


	printf("for loop:     ");
	for i:=0; i<4; i++ {
		printf(" {i}", i);
	}
	printf("\n");

	{
		printf("while loop:   ");
		i := 0;
		while i<5 {
			printf(" {i}", i);
			i++;
		}
		printf("\n");
	}

	{
		printf("do-while loop:");
		i := 0;
		do {
			i++;
			z := i*2;
			printf(" {i}", z);
		} while z < 8; // do while can look at variables inside block
		// this is questionable in terms of intuition, but otherwise do while is a lot less useful
		printf("\n");
	}

	printf("---------------\n");

	for i:=0; i<5*2; i++ {
		printf("foo ");
	}

	printf("\n");
	printf("---------------\n");

	for y:=0; y<4; y++ {
		for x:=0; x<4; x++ {
			printf("{i}{i} ", y,x);
		}
		printf("\n");
	}

	printf("\n");
	printf("---------------\n");

	// 
	sqr := 625; // 25^2
	sqrt : int;
	for i:=0; i<100; i++ {
		if i*i == sqr {
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", sqr, sqrt);

	for i:=0; i<10; i++ {
		if i % 2 != 0 {
			continue; // skip odd numbers
		}
		printf("{i} is even\n", i);
	}

	printf("---------------\n");

	{
		printf("simple_loop:\n");
		start := timer();

		//count := 10_000_000; countf := 10000000.0;
		count := 100;        countf := 100.0; // no casts yet

		counter := 0;
		for i:=0; i<count; i++ {
			counter++;
		}
		
		dur := timer_end(start);
		printf("time: {f} ms  time/iter: {f} ns\n", dur * 1000.0, dur / countf * 1000000000.0);
	}
}
